@page
@model IndexModel
@{
    ViewData["Title"] = "HTMX Experiment";
}

<div class="container py-4">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <div class="card shadow-sm">
                <div class="card-header">
                    <h1 class="h4 mb-0 text-center">Todo List</h1>
                </div>
                <div class="card-body">
                        <!-- Search Form -->
                        <div class="mb-3">
                            <div class="input-group">
                                <input id="search-input"
                                       name="searchTerm" 
                                       type="text" 
                                       class="form-control" 
                                       placeholder="Search tasks..." 
                                       value="@Model.SearchTerm"
                                       hx-get
                                       hx-page="index"
                                       hx-page-handler="Search"
                                       hx-trigger="input changed delay:300ms, search"
                                       hx-target="#todo-list" />
                            </div>
                        </div>

                        <!-- Todo Form -->
                        <form hx-post hx-page="index" hx-page-handler="AddTodo" hx-swap="none"
                              hx-on::after-request="this.reset()">
                            <div class="input-group mb-3">
                                <input name="newTodoText" type="text" class="form-control" placeholder="Add a new task" />
                                <button class="btn btn-primary" type="submit" id="button-add">
                                    Add
                                </button>
                            </div>
                        </form>
                        @(await Component.InvokeTypedComponentAsync<TodoList, List<Todo>>(Model.Todos))
                            <hr/>
                        @if (Model.Todos.Count > 0)
                        {
                            <button class="btn btn-sm btn-outline-secondary"
                                    hx-page="index"
                                    hx-page-handler="ClearCompleted"
                                    hx-swap="none"
                                    hx-post hx-confirm="Are you sure you want to clear all completed tasks?">
                                Clear completed
                            </button>
                        }
                        @(await Component.InvokeTypedComponentAsync<TodoStats, List<Todo>>(Model.Todos))
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/sortable/Sortable.min.js"></script>
    <script>
        htmx.onLoad(function(content) {
            var sortables = content.querySelectorAll(".sortable");
            for (var i = 0; i < sortables.length; i++) {
              var sortable = sortables[i];
              var sortableInstance = new Sortable(sortable, {
                  animation: 150,
                  ghostClass: 'blue-background-class',

                  //Make the `.htmx-indicator` unsortable
                  filter: ".htmx-indicator",
                  onMove: function (evt) {
                    return evt.related.className.indexOf('htmx-indicator') === -1;
                  },

                  //Disable sorting on the `end` event
                  onEnd: function (evt) {
                    this.option("disabled", true);
                  }
              });

              //Re-enable sorting on the `htmx:afterSwap` event
              sortable.addEventListener("htmx:afterSwap", function() {
                sortableInstance.option("disabled", false);
              });
            }
        });
    </script>
}